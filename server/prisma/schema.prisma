// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  discordId   String   @unique
  username    String
  globalName  String
  avatar      String
  email       String
  accessToken String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Character Character[]
}

model Character {
  id           String   @id @unique
  name         String
  role         String
  health       Int      @default(30)
  age          String
  baseRace     String
  subRace      String
  languages    String   @default("Nenhum Registro")
  affiliation  String   @default("Nenhum Registro")
  previous     String   @default("Nenhum Registro")
  defect       String   @default("Nenhum Registro")
  ideas        String   @default("Nenhum Registro")
  personality  String   @default("Nenhum Registro")
  history      String   @default("Nenhum Registro")
  proficiency  Int      @default(0)
  perception   Int      @default(0)
  displacement Int      @default(0)
  initiaitve   Int      @default(0)
  inspiration  Int      @default(0)
  xp           Int      @default(0)
  gold         Int      @default(50)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  characterAttributes CharacterAttributes[]
  characterExpertise  CharacterExpertise[]
  characterItens      CharacterItens[]
  characterSkills     CharacterSkills[]
  characterSpells     CharacterSpells[]
  characterDeath      CharacterDeath[]
}

model Attributes {
  id        Int      @id @unique @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @ignore

  Expertise           Expertise[]
  characterAttributes CharacterAttributes[]
}

model Expertise {
  id           Int      @id @unique @default(autoincrement())
  name         String   @unique
  attributesId Int
  createdAt    DateTime @default(now()) @ignore

  attributes Attributes @relation(fields: [attributesId], references: [id])

  characterExpertise CharacterExpertise[]
}

model Skills {
  id          Int      @id @unique @default(autoincrement())
  name        String
  damage      String?
  typeDamage  String?
  description String
  createdAt   DateTime @default(now()) @ignore

  characterSkills CharacterSkills[]
}

model Spells {
  id          Int      @id @unique @default(autoincrement())
  name        String
  damage      String?
  typeDamage  String?
  description String
  createdAt   DateTime @default(now()) @ignore

  characterSpells CharacterSpells[]
}

model Items {
  id          Int      @id @unique @default(autoincrement())
  name        String
  damage      String?
  typeDamage  String?
  description String
  createdAt   DateTime @default(now()) @ignore

  characterItens CharacterItens[]
}

model CharacterSkills {
  id                    String   @id @unique @default(uuid())
  characterId           String
  skillsId              Int
  bonusDamage           String?
  typeBonusDamage       String?
  additionalDescription String?
  createdAt             DateTime @default(now()) @ignore

  character Character @relation(fields: [characterId], references: [id])
  skills    Skills    @relation(fields: [skillsId], references: [id])
}

model CharacterSpells {
  id                    String   @id @unique @default(uuid())
  characterId           String
  spellsId              Int
  bonusDamage           String?
  typeBonusDamage       String?
  additionalDescription String?
  createdAt             DateTime @default(now()) @ignore

  character Character @relation(fields: [characterId], references: [id])
  spells    Spells    @relation(fields: [spellsId], references: [id])
}

model CharacterAttributes {
  id           String   @id @default(uuid())
  characterId  String
  attributesId Int
  value        Int      @default(0)
  modValue     Int
  createdAt    DateTime @default(now()) @ignore

  character Character  @relation(fields: [characterId], references: [id])
  attribute Attributes @relation(fields: [attributesId], references: [id])
}

model CharacterExpertise {
  id          String   @id @default(uuid())
  characterId String
  expertiseId Int
  value       Int      @default(0)
  createdAt   DateTime @default(now()) @ignore

  character Character @relation(fields: [characterId], references: [id])
  expertise Expertise @relation(fields: [expertiseId], references: [id])
}

model CharacterItens {
  id                    String   @id @default(uuid())
  characterId           String
  itemsId               Int
  bonusDamage           String?
  typeBonusDamage       String?
  additionalDescription String?
  createdAt             DateTime @default(now()) @ignore

  character Character @relation(fields: [characterId], references: [id])
  item      Items     @relation(fields: [itemsId], references: [id])
}

model CharacterDeath {
  id          String   @id @default(uuid())
  characterId String
  fail1       Boolean  @default(false)
  fail2       Boolean  @default(false)
  fail3       Boolean  @default(false)
  success1    Boolean  @default(false)
  success2    Boolean  @default(false)
  success3    Boolean  @default(false)
  createdAt   DateTime @default(now())

  character Character @relation(fields: [characterId], references: [id])
}
